From c75d7e77608567e2eea13e75cd92fa938e0b45da Mon Sep 17 00:00:00 2001
From: Will Dietz <w@wdtz.org>
Date: Tue, 22 Oct 2019 22:28:16 -0500
Subject: [PATCH] Add timer to trigger periodic sync every 120s

---
 CMakeLists.txt |  5 +++++
 src/main.c     | 17 +++++++++++++++++
 2 files changed, 22 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1436ec1..1561315 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -41,6 +41,10 @@ include_directories(${ICAL_INCLUDE_DIRS})
 pkg_check_modules(LIBSECRET REQUIRED libsecret-1)
 include_directories(${LIBSECRET_INCLUDE_DIRS})
 
+# glib
+pkg_check_modules(GLIB REQUIRED glib-2.0)
+include_directories(${GLIB_INCLUDE_DIRS})
+
 # json-glib
 pkg_check_modules(JSONGLIB REQUIRED json-glib-1.0)
 include_directories(${JSONGLIB_INCLUDE_DIRS})
@@ -88,6 +92,7 @@ target_link_libraries(${PROJECT_NAME}
 	${ICAL_LIBRARIES}
 	${LIBSECRET_LIBRARIES}
 	${JSONGLIB_LIBRARIES}
+	${GLIB_LIBRARIES}
 )
 
 install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin)
diff --git a/src/main.c b/src/main.c
index 8982f7f..a9e3d86 100644
--- a/src/main.c
+++ b/src/main.c
@@ -21,6 +21,7 @@
 #include "week-view.h"
 
 #include <curl/curl.h>
+#include <glib/gmain.h>
 #include <gtk/gtk.h>
 #include <libical/ical.h>
 #include <string.h>
@@ -47,6 +48,7 @@ struct _FocalApp {
 	GtkWidget* popover;
 	GtkWidget* eventDetail;
 	GtkWidget* revealer;
+	guint sync_timer_id;
 };
 
 enum {
@@ -280,6 +282,12 @@ static void workaround_sync_event_detail_with_week_view(GtkWidget* event_panel,
 	gtk_widget_set_size_request(event_panel, allocation->width, allocation->height);
 }
 
+static gboolean sync_func(gpointer userdata)
+{
+	do_calendar_sync((FocalApp*) userdata);
+	return G_SOURCE_CONTINUE;
+}
+
 static void focal_create_main_window(GApplication* app, FocalApp* fm)
 {
 	fm->mainWindow = gtk_application_window_new(GTK_APPLICATION(app));
@@ -357,6 +365,12 @@ static void focal_create_main_window(GApplication* app, FocalApp* fm)
 	gtk_widget_show_all(fm->mainWindow);
 
 	app_header_set_event(FOCAL_APP_HEADER(fm->header), NULL);
+
+	fm->sync_timer_id = g_timeout_add_seconds(
+		120 /* sync interval, seconds */,
+		G_SOURCE_FUNC(sync_func),
+		fm);
+	g_source_set_name_by_id(fm->sync_timer_id, "[focal] sync_timer");
 }
 
 static void load_preferences(const char* filename, FocalPrefs* out)
@@ -410,6 +424,9 @@ static void focal_activate(GApplication* app)
 static void focal_shutdown(GApplication* app)
 {
 	FocalApp* fm = FOCAL_APP(app);
+
+	if (fm->sync_timer_id)
+		g_source_remove(fm->sync_timer_id);
 	g_slist_free_full(fm->calendars, g_object_unref);
 	g_slist_free_full(fm->accounts, (GDestroyNotify) calendar_config_free);
 	g_free(fm->path_accounts);
