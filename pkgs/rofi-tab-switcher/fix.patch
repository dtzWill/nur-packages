From 4a0174bb87cdca1c9b00a8feb1d92bc02786d270 Mon Sep 17 00:00:00 2001
From: Will Dietz <w@wdtz.org>
Date: Fri, 4 Oct 2019 16:38:39 -0500
Subject: [PATCH] rofiface.py: sync bits from official example

---
 rofiface.py | 17 ++++++++++-------
 1 file changed, 10 insertions(+), 7 deletions(-)

diff --git a/rofiface.py b/rofiface.py
index ff83f97..0bfde6d 100755
--- a/rofiface.py
+++ b/rofiface.py
@@ -11,26 +11,29 @@ from xml.sax.saxutils import escape
 ### JSON I/O for Firefox FFI from Mozilla websites
 # Read a message from stdin and decode it.
 def get_message():
-    raw_length = sys.stdin.read(4)
+    raw_length = sys.stdin.buffer.read(4)
+
     if not raw_length:
         sys.exit(0)
     message_length = struct.unpack('=I', raw_length)[0]
-    message = sys.stdin.read(message_length)
+    message = sys.stdin.buffer.read(message_length).decode("utf-8")
     return json.loads(message)
 
 
 # Encode a message for transmission, given its content.
 def encode_message(message_content):
-    encoded_content = json.dumps(message_content)
+    encoded_content = json.dumps(message_content).encode("utf-8")
     encoded_length = struct.pack('=I', len(encoded_content))
-    return {'length': encoded_length, 'content': encoded_content}
+    #return {'length': encoded_length, 'content': encoded_content}
+    # use struct.pack("10s", bytes), to pack a string of the length of 10 characters
+    return {'length': encoded_length, 'content': struct.pack(str(len(encoded_content))+"s",encoded_content)}
 
 
 # Send an encoded message to stdout.
 def send_message(encoded_message):
-    sys.stdout.write(encoded_message['length'])
-    sys.stdout.write(encoded_message['content'])
-    sys.stdout.flush()
+    sys.stdout.buffer.write(encoded_message['length'])
+    sys.stdout.buffer.write(encoded_message['content'])
+    sys.stdout.buffer.flush()
 
 
 ### list of CSS colors; each window will get assigned a random one of these, picked the first time it is observed
-- 
2.23.GIT

